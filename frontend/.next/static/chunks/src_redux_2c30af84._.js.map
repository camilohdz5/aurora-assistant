{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/camilohdz5/Desktop/projects/personal-projects/aurora-assistant/frontend/src/redux/slices/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../store';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface UserState {\n  currentUser: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: UserState = {\n  currentUser: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action: PayloadAction<{ user: User; token: string }>) => {\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.currentUser = action.payload.user;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action: PayloadAction<string>) => {\n      state.isLoading = false;\n      state.isAuthenticated = false;\n      state.currentUser = null;\n      state.token = null;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.currentUser = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      state.error = null;\n    },\n  },\n});\n\nexport const { loginStart, loginSuccess, loginFailure, logout } = userSlice.actions;\n\n// Selectors\nexport const selectCurrentUser = (state: RootState) => state.user.currentUser;\nexport const selectIsAuthenticated = (state: RootState) => state.user.isAuthenticated;\nexport const selectUserToken = (state: RootState) => state.user.token;\nexport const selectUserIsLoading = (state: RootState) => state.user.isLoading;\nexport const selectUserError = (state: RootState) => state.user.error;\n\nexport default userSlice.reducer; "],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AAiBA,MAAM,eAA0B;IAC9B,aAAa;IACb,OAAO;IACP,iBAAiB;IACjB,WAAW;IACX,OAAO;AACT;AAEO,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACnC,MAAM;IACN;IACA,UAAU;QACR,YAAY,CAAC;YACX,MAAM,SAAS,GAAG;YAClB,MAAM,KAAK,GAAG;QAChB;QACA,cAAc,CAAC,OAAO;YACpB,MAAM,SAAS,GAAG;YAClB,MAAM,eAAe,GAAG;YACxB,MAAM,WAAW,GAAG,OAAO,OAAO,CAAC,IAAI;YACvC,MAAM,KAAK,GAAG,OAAO,OAAO,CAAC,KAAK;YAClC,MAAM,KAAK,GAAG;QAChB;QACA,cAAc,CAAC,OAAO;YACpB,MAAM,SAAS,GAAG;YAClB,MAAM,eAAe,GAAG;YACxB,MAAM,WAAW,GAAG;YACpB,MAAM,KAAK,GAAG;YACd,MAAM,KAAK,GAAG,OAAO,OAAO;QAC9B;QACA,QAAQ,CAAC;YACP,MAAM,WAAW,GAAG;YACpB,MAAM,KAAK,GAAG;YACd,MAAM,eAAe,GAAG;YACxB,MAAM,SAAS,GAAG;YAClB,MAAM,KAAK,GAAG;QAChB;IACF;AACF;AAEO,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,UAAU,OAAO;AAG5E,MAAM,oBAAoB,CAAC,QAAqB,MAAM,IAAI,CAAC,WAAW;AACtE,MAAM,wBAAwB,CAAC,QAAqB,MAAM,IAAI,CAAC,eAAe;AAC9E,MAAM,kBAAkB,CAAC,QAAqB,MAAM,IAAI,CAAC,KAAK;AAC9D,MAAM,sBAAsB,CAAC,QAAqB,MAAM,IAAI,CAAC,SAAS;AACtE,MAAM,kBAAkB,CAAC,QAAqB,MAAM,IAAI,CAAC,KAAK;uCAEtD,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/camilohdz5/Desktop/projects/personal-projects/aurora-assistant/frontend/src/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './slices/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    // Agrega otros reducers aquí si es necesario\n  },\n});\n\n// Inferir los tipos \\`RootState\\` y \\`AppDispatch\\` del propio store\nexport type RootState = ReturnType<typeof store.getState>;\n// Tipo inferido: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch; "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,MAAM,sIAAA,CAAA,UAAW;IAEnB;AACF","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/camilohdz5/Desktop/projects/personal-projects/aurora-assistant/frontend/src/redux/StoreProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\"; // Asumiendo que tu store está en redux/store.ts o similar\n// Si tu store tiene un tipo específico para RootState, podrías querer importarlo también\n// para un tipado más fuerte si es necesario aquí, aunque usualmente no lo es para el Provider.\n\nexport function StoreProvider({ children }: { children: React.ReactNode }) {\n  return <Provider store={store}>{children}</Provider>;\n} "],"names":[],"mappings":";;;;AAEA;AACA,kNAAiC,0DAA0D;AAH3F;;;;AAOO,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,wHAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFgB","debugId":null}}]
}